---- Generated SQL ----
SELECT course_id, title, description
FROM course_info
WHERE department = 'CMSC'
ORDER BY course_id;
-----------------------
Columns: ['course_id', 'title', 'description']
('CMSC100', 'Bits and Bytes of Computer and Information Sciences', 'Students are introduced to the fields (and disciplines) of computer science and information science within a small classroom setting. They will learn to make a successful transition from high school to the university, while exploring study skills, student success plans and research opportunities.')
('CMSC106', 'Introduction to C Programming', 'Design and analysis of programs in C. An introduction to computing using structured programming concepts. Intended for students with no or minimal programming experience.')
('CMSC122', 'Introduction to Computer Programming via the Web', "Introduction to computer programming in the context of developing full featured dynamic web sites. Uses a problem solving approach to teach basics of program design and implementation using JavaScript; relates these skills to creation of dynamic web sites; then explores both the potential and limits of web-based information sources for use in research. Intended to help relate a student's major to these emerging technologies.")
('CMSC125', 'Introduction to Computing', 'Introduces you to the computing field as a whole. You will gain skills used across the spectrum of computing majors and learn about the great variety of routes into the various areas of study and employment in technological fields.')
('CMSC131', 'Object-Oriented Programming I', 'Corequisite:MATH140. Introduction to programming and computer science. Emphasizes understanding and implementation of applications using object-oriented techniques. Develops skills such as program design and testing as well as implementation of programs using a graphical IDE. Programming done in Java.')
('CMSC132', 'Object-Oriented Programming II', 'Introduction to use of computers to solve problems using software engineering principles. Design, build, test, and debug medium -size software systems and learn to use relevant tools. Use object-oriented methods to create effective and efficient problem solutions. Use and implement application programming interfaces (APIs). Programming done in Java.')
('CMSC133', 'Object Oriented Programming I Beyond Fundamentals', 'An introduction to computer science and object-oriented programming for students with prior Java programming knowledge (conditionals, loops, methods). Program design, implementation, and testing using object-oriented techniques. All programming will be done in Java using a graphical IDE.')
('CMSC216', 'Introduction to Computer Systems', 'Introduction to the interaction between user programs and the operating system/hardware. Major topics include C programming, introductory systems programming, and assembly language. Other concepts covered include UNIX, machine data representation, thread management, optimization, and virtual memory. Programming is done in the Linux Environment.')
('CMSC250', 'Discrete Structures', 'Fundamental mathematical concepts related to computer science, including finite and infinite sets, relations, functions, and propositional logic. Introduction to other techniques, modeling and solving problems in computer science. Introduction to permutations, combinations, graphs, and trees with selected applications.')
('CMSC298A', 'Special Topics in Computer Science', '')
('CMSC320', 'Introduction to Data Science', 'An introduction to the data science pipeline, i.e., the end-to-end process of going from unstructured, messy data to knowledge and actionable insights. Provides a broad overview of several topics including statistical data analysis, basic data mining and machine learning algorithms, large-scale data management, cloud computing, and information visualization.')
('CMSC330', 'Organization of Programming Languages', 'A study of programming languages, including their syntax, semantics, and implementation. Several different models of languages are discussed, including dynamic, scripting (e.g., Ruby, Python) functional (e.g., OCaml, Haskell, Scheme), and memory safe systems programming (e.g., Rust). Explores language features such as formal syntax, scoping and binding of variables, higher-order programming, typing, and type polymorphism. Introduces finite automata, context free grammar, parsing, lambda calculus, and basics of security attacks and software security.')
('CMSC335', 'Web Application Development with JavaScript', 'Formerly:CMSC389N. Provides an introduction to modern ways of developing Web Applications/Services using JavaScript for both front-end and back-end. The course covers topics on fundamental JavaScript language constructs, server-side JavaScript, back-end data persistence, and client-side JavaScript to build Web Applications that interact with Web services and back-end databases.')
('CMSC351', 'Algorithms', 'A systematic study of the complexity of some elementary algorithms related to sorting, graphs and trees, and combinatorics. Algorithms are analyzed using mathematical techniques to solve recurrences and summations.')
('CMSC388J', 'Special Topics in Computer Science; Building Secure Web Applications', 'Explores tools such as Python, Flask, Django, MongoDB, Svelte, and React. A student-led course through Student-Initiated Courses (STICs) @ UMD: http://stics.umd.edu/Please click here for more information.')
('CMSC389B', 'Special Topics in Computer Science; A Tour of Programming Languages', 'A Tour of Programming Languages introduces students to various programming paradigms and languages. This course aims to help students further their understanding of programming language (PL) design, as wellas gain experience with different programming philosophies, paradigms, and mindsets. A student-led course through Student-Initiated Courses (STICs) @ UMD: http://stics.umd.edu/Please click here for more information.')
('CMSC389E', 'Special Topics in Computer Science; Digital Logic Design Through Minecraft', 'Minimum grade of C- in CMSC216 and CMSC250; and permission of CMNS-Computer Science department.We will explore the theory and applications of combinational and sequential circuits. All projects will be done using Minecraft Redstone.The course will cover basic gates to more advanced circuits including memory gates and large sequential circuits. A student-led course through Student-Initiated Courses (STICs) @ UMD: http://stics.umd.edu/Please click here for more information.')
('CMSC389L', 'Special Topics in Computer Science; Reinforcement Learning', 'Minimum grade of C- in CMSC216, CMSC250, CMSC320; MATH241, 1 course witha minimum grade of C- from (MATH240, MATH461); and permission of CMNS-Computer Science department.This course provides a comprehensive introduction to reinforcement learning. We begin with a review of key concepts in machine learning and planning, such as gradient descent and neural networks. We then explore core reinforcement learning algorithms-including value-based, policy-gradient, and actor-critic methods-along with essential tools like TensorFlow and Gymnasium. The course focuses on applications in robotics and autonomous systems, finance, and games. A student-led course through Student-Initiated Courses (STICs) @ UMD: http://stics.umd.edu/Please click here for more information.')
('CMSC389O', 'Special Topics in Computer Science; The Coding Interview', 'Technical interviewing is a critical skill for acquiring internships and jobs. Students will gain a comprehensive, practical introduction to technical interviews. Students will be introduced to basic topics such as Big O and String Manipulation and later move into more complex topicssuch as Graphs and Dynamic Programming. Most in-class time will bespenton mock interviews to give real interview practice. The course facilitators are experienced in interviewing and have received internship/job offers from companies like Meta, Optiver, Bloomberg, Amazon, Apple, Microsoft, Databricks, Capital One, and more. A student-led course through Student-Initiated Courses (STICs) @ UMD: http://stics.umd.edu/Please click here for more information.')
('CMSC389P', 'Special Topics in Computer Science; Mastering the PM Interview', 'Prepares students for PM interviews in the technology industry. The class will be a combination of lectures and in-class activities that will provide hands-on practice for PM roles. We will begin with interview questions involving behavioral and technical concepts, and transition tomore complex PM-specific topics including product design, analytical, and case questions. A student-led course through Student-Initiated Courses (STICs) @ UMD: http://stics.umd.edu/Please click here for more information.')
('CMSC396H', 'Computer Science Honors Seminar', 'Overview of computer science research activities, techniques, and tools. Diverse research areas will be covered, including systems, networks, artificial intelligence, human-computer interaction, software engineering, graphics, vision, and theory.')
('CMSC398L', 'Special Topics in Computer Science; Introduction to Competitive Programming', 'Covers most of the basic techniques and algorithms that are used in competitive programming. Topics include C++ STL, greedy, dynamic programming, divide and conquer, graph algorithms, and data structures. Students will learn different algorithmic techniques and apply these concepts to solve interesting programming problems in practice. A student-led course through Student-Initiated Courses (STICs) @ UMD: http://stics.umd.edu/Please click here for more information.')
('CMSC398M', 'Special Topics in Computer Science; Introduction to Product Design with Figma', 'An exploration into the world of Figma! Figma is a popular collaborative design tool used by many developers for brainstorming, proof of concepts, and website/application design. We will be exploring the various capabilities of Figma, and how we can create a website or mobile application from a design made on Figma. Students will learn principles of design, create mockups, and build their own website/mobile app that will look great for resumes and portfolios. A student-led course through Student-Initiated Courses (STICs) @ UMD: http://stics.umd.edu/Please click here for more information.')
('CMSC398P', 'Special Topics in Computer Science; Practical Cloud Computing with AWS', 'This course provides a practical introduction to cloud computing with Amazon Web Services (https://aws.amazon.com/about-aws/) (AWS). Students will learn how to build applications using a variety of AWS services, including S3, EC2, Lambda, and ECS. Additionally they will have an exam ready understanding of many services, benefits, and features of AWS. Thecourse will culminate in a final resume-worthy project that will be built, deployed, and demoed. A student-led course through Student-Initiated Courses (STICs) @UMD:Click here for more information.')
('CMSC398R', 'Special Topics in Computer Science; Binary Exploitation', 'An introduction to exploiting common vulnerabilities in compiled applications. Topics include an overview of C, intro to x86 assembly, buffer overflows on stack and heap, format string bugs, heap exploitation, and other special topics (kernel/browser/blockchain). Students will be able to write exploits for all the bugs learned in class, and secure their own applications. A student-led course through Student-Initiated Courses (STICs) @ UMD: http://stics.umd.edu/Please click here for more information.')
('CMSC398W', 'Special Topics in Computer Science; Practical Tools for Efficient Development', 'Minimum grade of C- in CMSC216 and CMSC250; and permission of CMNS-Computer Science department.This course will provide a broad overview of many common and useful tools, like the command line, Git, debuggers, build systems, and more. Through a hands-on approach, you will be introduced to a variety of tools and techniques that can immediately be applied to everyday problems. We aim to provide students with material that improves their computing ecosystem literacy and increases their efficiency as a developer. A student-led course through Student-Initiated Courses (STICs) @ UMD: http://stics.umd.edu/Please click here for more information.')
('CMSC398Z', 'Special Topics in Computer Science; Effective use of AI Coding Assistants and Agents', 'Covers how to effectively use AI coding assistants and agents to develop  software. The course will look at the tools and techniques used by engineers at companies like Google and Microsoft to develop production-quality code, as well as techniques to vibe code and quickly generate interactive visualizations and proof-of-concepts. The course will cover using chatbots, AI-powered IDEs such as VSCode and cursor.ai,and coding assistants that can automatically invoke build systems, run test cases, and fix errors. The course will also cover Python and Simon Willison s LLM tool, which allows writing simple Pythonprograms that query LLMs and interact with databases, structured data extraction, and semantic search.')
('CMSC411', 'Computer Systems Architecture', 'Input/output processors and techniques. Intra-system communication, buses, caches. Addressing and memory hierarchies. Microprogramming, parallelism, and pipelining.')
('CMSC412', 'Operating Systems', 'A hands-on introduction to operating systems, including topics in: multiprogramming, communication and synchronization, memory management, IO subsystems, and resource scheduling polices. The laboratory component consists of constructing a small kernel, including functions for device IO, multi-tasking, and memory management.')
('CMSC414', 'Computer and Network Security', 'An introduction to the topic of security in the context of computer systems and networks. Identify, analyze, and solve network-related security problems in computer systems. Fundamentals of number theory, authentication, and encryption technologies, as well as the practical problems that have to be solved in order to make those technologies workable in a networked environment, particularly in the wide-area Internet environment.')
('CMSC416', 'Introduction to Parallel Computing', 'Jointly offered with:CMSC616.Formerly:CMSC498X. Introduction to parallel computing. Topics include programming for shared memory and distributed memory parallel architectures, and fundamental issues in design, development, and performance analysis of parallel programs.')
('CMSC417', 'Computer Networks', "Or must be in the (Computer Science (Doctoral), Computer Science (Master's)) program. Computer networks and architectures. The OSI model including discussion and examples of various network layers. A general introduction to existing network protocols. Communication protocol specification, analysis, and testing.")
('CMSC420', 'Advanced Data Structures', "Or must be in the (Computer Science (Doctoral), Computer Science (Master's)) program. Description, properties, and storage allocation functions of data structures including balanced binary trees, B-Trees, hash tables, skiplists, tries, KD-Trees and Quadtrees. Algorithms for manipulating structures. Applications from areas such as String Processing, Computer Graphics, Information Retrieval, Computer Networks, Computer Vision, and Operating Systems.")
('CMSC421', 'Introduction to Artificial Intelligence', "Or must be in the (Computer Science (Doctoral), Computer Science (Master's)) program. Introduces a range of ideas and methods in AI, varying semester to semester but chosen largely from: automated heuristic search, planning, games, knowledge representation, logical and statistical inference, learning, natural language processing, vision, robotics, cognitive modeling, and intelligent agents. Programming projects will help students obtain a hands-on feel for various topics.")
('CMSC422', 'Introduction to Machine Learning', 'Machine Learning studies representations and algorithms that allow machines to improve their performance on a task from experience. This is a broad overview of existing methods for machine learning and an introduction to adaptive systems in general. Emphasis is given to practical aspects of machine learning and data mining.')
('CMSC423', 'Bioinformatic Algorithms, Databases, and Tools', "Or must be in the (Computer Science (Doctoral), Computer Science (Master's)) program. An introduction to the main algorithms, databases, and tools used in bioinformatics. Topics may include assembly and analysis of genome sequences, reconstructing evolutionary histories, predicting protein structure, and clustering of biological data. Use of scripting languages to perform analysis tasks on biological data. No prior knowledge of biology is assumed.")
('CMSC424', 'Database Design', "Or must be in the (Computer Science (Doctoral), Computer Science (Master's)) program. Students are introduced to database systems and motivates the database approach as a mechanism for modeling the real world. An in-depth coverage of the relational model, logical database design, query languages, and other database concepts including query optimization, concurrency control; transaction management, and log based crash recovery. Distributed and Web database architectures are also discussed.")
('CMSC425', 'Game Programming', 'An introduction to the principles and practice of computer game programming and design. This includes an introduction to game hardware and systems, the principles of game design, object and terrain modeling, game physics, artificial intelligence for games, networking for games, rendering and animation, and aural rendering. Course topics are reinforced through the design and implementation of a working computer game.')
('CMSC426', 'Computer Vision', 'An introduction to basic concepts and techniques in computervision. This includes low-level operations such as image filtering and edge detection, 3D reconstruction of scenes using stereo and structure from motion, and object detection, recognition and classification.')
('CMSC430', 'Introduction to Compilers', "Or must be in the (Computer Science (Doctoral), Computer Science (Master's)) program. Topics include lexical analysis, parsing, intermediate representations, program analysis, optimization, and code generation.")
('CMSC433', 'Programming Language Technologies and Paradigms', 'Programming language technologies (e.g., object-oriented programming), their implementations and use in software design and implementation.')
('CMSC434', 'Introduction to Human-Computer Interaction', "Or must be in the (Computer Science (Doctoral), Computer Science (Master's)) program. Assess usability by quantitative and qualitative methods. Conduct task analyses, usability tests, expert reviews, and continuing assessments of working products by interviews, surveys, and logging. Apply design processes and guidelines to develop professional quality user interfaces. Build low-fidelity paper mockups, and a high-fidelity prototype using contemporary tools such as graphic editors and a graphical programming environment (eg: Visual Basic, Java).")
('CMSC435', 'Software Engineering', 'State-of-the-art techniques in software design and development. Laboratory experience in applying the techniques covered. Structured design, structured programming, top-down design and development, segmentation and modularization techniques, iterative enhancement, design and code inspection techniques, correctness, and chief-programmer teams. The development of a large software project.')
('CMSC436', 'Programming Handheld Systems', 'Fundamental principles and concepts that underlie the programming of handheld systems, such as mobile phones, personal digital assistants, and tablet computers. Particular emphasis will be placed on concepts such as limited display size, power, memory and CPU speed; and new input modalities, where handheld systems differ substantially from non-handheld systems, and thus require special programming tools and approaches. Students will apply these concepts and principles in the context of an existing handset programming platform.')
('CMSC451', 'Design and Analysis of Computer Algorithms', "Or must be in the (Computer Science (Doctoral), Computer Science (Master's)) program. Fundamental techniques for designing efficient computer algorithms, proving their correctness, and analyzing their complexity. General topics include graph algorithms, basic algorithm design paradigms (such as greedy algorithms, divide-and-conquer, and dynamic programming), network flows, NP-completeness, and other selected topics in algorithms.")
('CMSC454', 'Algorithms for Data Science', 'Fundamental methods for processing a high volume of data. Methods include stream processing, locally sensitive hashing, web search methods, page rank computation, network and link analysis, dynamic graph algorithms as well as methods to handle high dimensional data/dimensionality reduction.')
('CMSC456', 'Cryptography', 'The theory, application, and implementation of mathematical techniques used to secure modern communications. Topics include symmetric and public-key encryption, message integrity, hash functions, block-cipher design and analysis, number theory, and digital signatures.')
('CMSC460', 'Computational Methods', 'Basic computational methods for interpolation, least squares, approximation, numerical quadrature, numerical solution of polynomial and transcendental equations, systems of linear equations and initial value problems for ordinary differential equations. Emphasis on methods and their computational properties rather than their analytic aspects. Intended primarily for students in the physical and engineering sciences.')
('CMSC466', 'Introduction to Numerical Analysis I', 'Floating point computations, direct methods for linear systems, interpolation, solution of nonlinear equations.')
('CMSC470', 'Introduction to Natural Language Processing', 'Introduction to fundamental techniques for automatically processing and generating natural language with computers. Machine learning techniques, models, and algorithms that enable computers to deal with the ambiguity and implicit structure of natural language. Application of these techniques in a series of assignments designed to address a core application such as question answering or machine translation.')
('CMSC471', 'Introduction to Data Visualization', 'Formerly:CMSC498O. Datasets are becoming increasingly large and complex, requiring intuitive ways to explore and interpret them quickly and efficiently. In this case, a picture is worth a thousand words: visualizations enable us to transform data into images that are easier to understand and reason about, compared to raw numbers and raw text. Visualizations are critical tools in externalizing and organizing our knowledge and insights, whether to explore collected datasets to improve our understanding of the physical world, to assess and debug analysis/experimental workflows, or to present new and interesting results to diverse audiences. In this course we will study techniques and algorithms for creating effective visualizations based on principles from graphic design, perceptual psychology, and cognitive science. Students will learn how to design and build interactive visualizations for the web, using the D3.js (Data-Driven Documents) framework.')
('CMSC473', 'Capstone in Machine Learning', 'Recommended:Background or exposure to machine learning topics is strongly encouraged.Formerly:CMSC498P.Additional information:Students will be paired with project advisors from the UMD faculty or alternatively, an industry advisor. Students are encouraged to plan for projects results that can be published at academic conferences or will impact academic research. Semester-long project course in which each student will identify and carry out a project related to machine learning, with the goal of publishing a research paper or software tool.')
('CMSC474', 'Introduction to Computational Game Theory', "Or must be in the (Computer Science (Doctoral), Computer Science (Master's)) program. Game theory deals with interactions among agents (either human or computerized) whose objectives and preferences may differ from the objectives and preferences of the other agents. It will also provide a comprehensive introduction to game theory, concentrating on its computational aspects.")
('CMSC475', 'Combinatorics and Graph Theory', 'And permission of CMNS-Computer Science department; or permission of CMNS-Mathematics department.Cross-listed withMATH475 . General enumeration methods, difference equations, generating functions. Elements of graph theory, matrix representations of graphs, applications of graph theory to transport networks, matching theory and graphical algorithms.')
('CMSC498A', 'Selected Topics in Computer Science', 'An individualized course designed to allow a student or students to pursue a selected topic not taught as a part of the regular course offerings under the supervision of a Computer Science faculty member. Credit according to work completed.')
('CMSC498B', 'Selected Topics in Computer Science; Cloud Computing', 'Prerequisites: Minimum grade of C- in CMSC330 and CMSC351.Explores several fundamental topics of cloud computing, including IaaS (e.g., Open Stack, Kubernetes), key big data platforms, and data center networking. The course combines group reading and discussion of influential publications in the field, lectures by the instructor, talksby invited speakers, and a large project. Students will be a part of an agile development team, with extensive experience with GitHub, agile tools, and various technologies. Each course project is solicited from open-source community and will be mentored by an industry leader and/or engineer, or a senior graduate student/postdoc.')
('CMSC498J', 'Selected Topics in Computer Science; Human-Robot Interaction, Device Prototyping, and Embodied AI', "Minimum grade of C- in CMSC330 and CMSC351; and permission of CMNS-Computer Science department. Or must be in the (Computer Science (Doctoral), Computer Science (Master's)) program.This course is designed to introduce advanced undergraduates to human-robot interaction (HRI) and the recent developments in embodied AI, an emerging research area focused on the design and evaluation of interactions between humans and robotic technologies. Students will: (1)learn design principles for building, and research methods for evaluating, interactive robot systems through lectures, readings, and assignments; (2) read and discuss relevant literature to gain a solid understanding of various research topics in HRI; and (3) gain hands-on experience by prototyping a functional embodied AI robot that integrates the principles, methods, and knowledge acquired throughout the course.")
('CMSC498K', 'Selected Topics in Computer Science; Introduction to Multimodal Deep Learning', 'Prerequisites: Minimum grade of C- in CMSC320, CMSC330, and CMSC351; and 1 course with a minimum grade of C- from (MATH240, MATH341, MATH461); and permission of the CMNS-Computer Science department.This course will provide a comprehensive introduction to the fundamental concepts of key modalities and algorithms for multimodal representation learning, alignment, and fusion. Students will learn key concepts, algorithms, and applications centered around multimodal deep learning while gaining hands-on experience with state-of-the-art models and emerging reresearch trends.')
('CMSC498Z', 'Selected Topics in Computer Science; Differentiable Programming for Agentic AI and Physical Intelligence', 'Prerequisites: Minimum grade of C- in CMSC330 and CMSC351 and permission  of the CMNS-Computer Science department.This course is an introduction to differentiable Programming, a new programiing paradigm in which a numerical program can be differentiated through automatic differentiation, allowing gradient-based optimization of parameters in the program. It has broad applications in Computer Graphics, Computer Vision, Deep Learning, Quantum Computing, System Control, and many more. The course assumes a good working knowledge of linear algebra and differentiation. The course experience includes hands-on project s with differentiable programming for agentic AI systems and physical intelligence.')
('CMSC499A', 'Independent Undergraduate Research', 'Students are provided with an opportunity to participate in a computer science research project under the guidance of a faculty advisor. Format varies. Students and supervising faculty member will agree to a research plan which must be approved by the department. As part of each research plan, students should produce a final paper delineating their contribution to the field.')
('CMSC616', 'Foundations of Parallel Computing', 'Formerly:CMSC818X. Covers the foundations of parallel computing. Topics include programming for shared memory and distributed memory parallel architectures, and fundamental issues in design, development and analysis of parallel programs.')
('CMSC631', 'Program Analysis and Understanding', 'Techniques for static analysis of source code and modern programming paradigms. Analysis techniques: data flow analysis, program dependence graphs, program slicing, abstract interpretation. The meaning of programs: denotational semantics, partial evaluation. Advanced treatment of abstraction mechanisms: polymorphic types, operation overloading, inheritance, object-oriented programming and ML-like programming languages.')
('CMSC634', 'Empirical Research Methods for Computer Science', 'Recommended:An introductory statistics class. A graduate-level introductory course on empirical reseach methods for computer scientists. Experimental techniques for evaluating software systems and processes, human performance using interfaces, programming environments, and software engineering methods. Introduction to constructs and methods of measurements, qualitative and quantitative design, quasi-experimental and non-experimental design, baseline design, and statistical analysis.')
('CMSC657', 'Introduction to Quantum Information Processing', 'g., eigenvalues, eigenvectors, Hermitian and unitary matrices) is required.Formerly:CMSC858K.Additional information:Previous background in quantum mechanics or theory of computation is not required. An introduction to the field of quantum information processing. Students will be prepared to pursue further study in quantum computing, quantum information theory, and related areas.')
('CMSC660', 'Scientific Computing I', 'Fundamental techniques in scientific computation with an introduction to theory and software for each topic. Computer numbers and sources of errors, numerical linear algebra, optimization, and Monte Carlo methods.')
('CMSC673', 'Capstone in Machine Learning', 'Jointly offered with:CMSC473.Formerly:CMSC798P. Semester-long project course in which each student will identify and carry out a project related to machine learning, with the goal of publishing a research paper or software tool.')
('CMSC722', 'Artificial Intelligence Planning', 'Automated planning of actions to accomplish some desired goals. Basic algorithms, important systems, and new directions in the field of artificial intelligence planning systems.')
('CMSC723', 'Natural Language Processing', 'Additional information:CMSC students may only receive PhD Comp. credit for CMSC723 or CMSC823, not both. Introduce fundamental concepts, techniques, and algorithms for the computational handling of natural language. Statistical and machine learning techniques, models, and algorithms that enable computers to deal with the ambiguity and implicit structure of human language. Approaches that focus on uncovering linguistic structure, such as syntactic or semantic parsing, as well as those that focus on manipulating text in useful ways, such as question answering or machine translation.')
('CMSC740', 'Advanced Computer Graphics', 'An introduction to advanced concepts in computer graphics. Includes an introduction to realistic rendering based on physical properties of light transport, radiometric concepts, and the rendering equation; Monte Carlo integration techniques to solve the rendering equation such as path tracing and multiple importance sampling; and neural network techniques for efficient sampling and denoising. Further discusses recent advances in 3D modeling and reconstruction, such as neural network-based 3D reconstruction; inverse rendering using neural radiance fields and differentiable rendering; and generative modeling for images, videos, and 3D data.')
('CMSC798', "Master's Non-Thesis Research", '')
('CMSC799', "Master's Thesis Research", '')
('CMSC801', 'Department Internal Research Seminar', 'Formerly:CMSC798E. Research overviews from faculty to help introduce departmental research to graduate students.')
('CMSC818I', 'Advanced Topics in Computer Systems; Large Language Models, Security, and Privacy', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.')
('CMSC818J', 'Advanced Topics in Computer Systems; Domain Specific Architecture', 'Cross-listed with ENEE759c. Credit only granted for CMSC818J or ENEE759C.Must be in the Graduate Program in Computer Science. All other graduate students must request permission.')
('CMSC818T', 'Advanced Topics in Computer Systems; Applied Cryptographic Systems and Privacy Enhancing Technologies.', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.The course is a seminar structured around selected papers and a course project on advanced cryptographic systems. This will cover systems for privacy-preserving analytics, private information retrieval, encrypted messaging and moderation, privacy-preserving payments, and identity systems and anonymous credentials. This course is intended for computer science graduate students and advanced undergraduates with an interest in the area. Undergraduates should have taken a previous security or cryptography class.')
('CMSC818V', 'Advanced Topics in Computer Systems; Machine Learning for Physical Sensing and Perception', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.This course delves into advanced machine learning techniques for physical sensing and real-world perception. Topics include multimodal 3D volumetric rendering with physics-informed priors, ultra-low-power navigation with metamaterial sensing, urban localization via wireless signal patterns, sparse sensing for underwater imaging, and integrating spatial knowledge into language models for perception-aware AI.')
('CMSC828J', 'Advanced Topics in Information Processing; Common-sense Reasoning and Natural Language Understanding', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.')
('CMSC828V', 'Advanced Topics in Information Processing; Numerical Methods for Data Science and Machine Learning', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.')
('CMSC838B', 'Advanced Topics in Programming Languages; Differentiable Programming for Agentic AI and Physical Intelligence', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.This course is an introduction to differentiable Programming, a new programming paradigm in which a numerical program can be differentiated through automatic differentiation , allowing gradient-based optimization of parameters in the program. It has broad applications in Computer Graphics, Computer Vision, Deep Learning, Quantum Computing, System Control, and many more. The course assumes a good working knowledge of linear algebra and differentiation. The course experience includes hands-on project s with differentiable programming for agentic AI systems and physical intelligence.')
('CMSC838L', 'Advanced Topics in Programming Languages; Programming Languages and Computer Architecture', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.Exploration of the interplay between computer architecture and programming languages, with a focus on applying PL formalisms and techniques to emerging computer architecture research. The course is structured into three parts: 1) Topics in novel computer architectures/computing paradigms (dataflow processing, intermittent computing, persistent memory, reconfigurable architectures, etc.); 2) PL*for* computer architecture (design of hardware description languages and high-level synthesis languages, etc.); 3) Problems of end-to-end correctness guarantees (verified and secure compilation, full-stack correctness proofs, etc.). This is a seminar course where students read and present papers, as well as carry out a research project.')
('CMSC839A', 'Advanced Topics in Human-Computer Interaction; Embodied Media Design', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.Explores the potential of human augmentation technologies, such as wearable computing, haptics, virtual reality, and more, to enhance human physical, perceptual, and cognitive capabilities. To achieve this, students will read relevant literature from the fields of Psychology, Cognitive Science, and Human-Computer Interaction. Additionally, students will create low-fidelity paper mockups and a prototype based on digital/analog circuit design, mechanical design, and a programming environment.')
('CMSC839C', 'Advanced Topics in Human-Computer Interaction; Governing Algorithms & Algorithmic Governance', 'Cross-listed with INST878D. Credit only granted for INST878D or CMSC839C.Must be in the Graduate Program in Computer Science. All other graduate students must request permission.This cross-cutting interdisciplinary course, taught jointly between the College of Information Studies and the Department of Computer Science, investigates the role that algorithms and automated decision-making systems play in markets, societies, and policymaking. The course connects policy and computational conceptualizations of transparency, security, fairness, privacy, manipulation, and accountability through a series of casestudies and burning debates. Students will collaborate cross-disciplinary and be encouraged to work through difficult trade-offs to reach consensus. By discussing recent applications of algorithms for social and consumer sorting, and the moderation and generation of content, students will engage with the pressing challenges and opportunities in the governance of and by algorithms.')
('CMSC839E', 'Advanced Topics in Human-Computer Interaction; Uncertainty Communication for Decision-Making', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.Human-Computer Interaction (HCI) research topics focusing on model uncertainty and decision-making. We will cover a range of models, from linear regression to probabilistic forecasts and AI foundation models, and explore how to help human users understand and manage uncertainty in these computational models. Core topics include statistical communication, explainability, decision-making, uncertainty visualization, and LLM/LMM uncertainty. The course format includes a combination of readings, presentations, discussions, and lectures.')
('CMSC848B', 'Selected Topics in Information Processing; Computational Imaging', 'Cross-listed with ENEE739Z. Credit only granted for CMSC848B or ENEE739Z.Introduces various computational imaging systems and the algorithms that underlie their operation. Particular emphasis will be placed on recently developed learning based reconstruction algorithms. This is a mixed lecture/seminar course.')
('CMSC848I', 'Selected Topics in Information Processing; AI Agents and Sequential Decision Making', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.AI-based agents need to operate in complex environments to make sequences of decisions to achieve some known goal. Many learning frameworks for sequential decision making exist, including reinforcement learning, imitation learning, learning from instructions, and others. In this course we will cover the foundations of all these methods, building up to modern AI-based agents that are enabled by large foundation models such as large language models and large vision/language models.')
('CMSC848K', 'Selected Topics in Information Processing; Multimodal Foundation Models', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.Discusses recent foundation models proposed in the literature, with a focus on vision-language models. Topics include large language models, vision-language models, and vision-audio models.')
('CMSC848N', 'Selected Topics in Information Processing; Generative AI Agents', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.Dives into the cutting edge of generative AI agents-autonomous systems powered by large language and vision models that can reason, plan, and act in complex environments. Explores how these agents use tools, memory, and multi-step reasoning to tackle real-world tasks, drawing from recent breakthroughs in research and industry. Students will design, build, and evaluate their own agents through hands-on projects.')
('CMSC848P', 'Selected Topics in Information Processing; Machine Learning Theory', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.This course covers core topics in machine learning theory, including generalization bounds in the offline setting (including VC dimension, one-inclusion graphs, compression schemes) and regret bounds in the online setting (including multiplicative weights, Littlestone dimension). We will also explore advanced topics such as adversarial robustness, the intersection of game theory and learning, etc.')
('CMSC848R', 'Selected Topics in Information Processing; Language Model Interpretability', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.The course focuses on state-of-the-art methods for interpreting language language models and understanding their learned behaviors. We will discuss approaches centered on both understanding models  internal mechanisms/representations and attributing behaviors back to thee training data. We will focus on model tendencies including hallucination, factuality, memorization, and explanation/reasoning elicitation. If time allows, we will discuss recent developments in ameliorating learned behaviors, such as model editing, unlearning, and steering.')
('CMSC848W', 'Selected Topics in Information Processing; Foundations of Interpretable Artificial Intelligence', 'Cross-listed with ENEE739F. Credit granted only for CMSC848W or ENEE739F.The course introduces advances in the field of eXplainable Artificial Intelligence (XAI), ranging from inherently interpretable models, all the way to posthoc explanations (e.g., feature attributions, counterfactual explanations, mechanistic interpretability). The course will also discuss connections between explainability and robustness, privacy, ethics, and trust, as well as, emergent research challenges in explainability for large generative models.')
('CMSC858J', 'Advanced Topics in Theory of Computing; Algorithmic Game Theory', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.Mechanism Design in particular Algorithmic Game Theory, which can be viewed as "incentive-aware algorithm design", have become an increasingly important part of (theoretical) computer science in recent years. Recent results show a strong relation between computer science (esp. networking) and economics (esp. game theory), and techniques from each seem well-poised to help with key problems of the other. My first goal is to study these connections which produce powerful mechanisms for adaptive and networked environments and several other applied areas, and improve the experience of users of the Web and internet. To this end,it would be a broad survey of topics such as: algorithmic mechanism design; auctions (efficient, revenue-maximizing, sponsored search; congestion and potential games; cost sharing; existence, computation, and learning of equilibria; game theory in the Internet; network games; price of anarchy; selfish routing.')
('CMSC898', 'Pre-Candidacy Research', 'Must be in the Graduate Program in Computer Science. All other graduate students must request permission.')
('CMSC899', 'Doctoral Dissertation Research', '')
